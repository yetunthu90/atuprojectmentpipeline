name: Laravel CI/CD with Docker Compose

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Start Docker Compose Services
        run: |
          docker compose up -d --build
    
The error OCI runtime exec failed: exec failed: unable to start container process: exec: "composer": executable file not found in $PATH: unknown indicates that the composer command is not available inside the container. This is typically caused by one of the following reasons:

Composer is Not Installed: The composer command isn't installed in the app container.
Incorrect Dockerfile Configuration: The Dockerfile for your app service may not be setting up Composer properly.
How to Resolve This Issue:
Ensure Composer is Installed in Your Dockerfile: Make sure Composer is being installed in the Dockerfile used to build the app service container. Add the installation of Composer in your Dockerfile for the app service.
Example Dockerfile for Laravel (with Composer installation):
dockerfile
Copy
Edit
# Use an official PHP image
FROM php:8.1-fpm

# Install dependencies
RUN apt-get update && apt-get install -y libpng-dev libjpeg-dev libfreetype6-dev zip git

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Set working directory
WORKDIR /var/www

# Copy the application files
COPY . .

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install gd

# Install Composer dependencies
RUN composer install --no-interaction --prefer-dist --optimize-autoloader

# Set file permissions
RUN chown -R www-data:www-data /var/www

# Expose the port the app runs on
EXPOSE 9000

CMD ["php-fpm"]
Explanation:
The line RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer installs Composer globally.
The RUN composer install in the Dockerfile ensures that Composer dependencies are installed at build time. This can save you the step of running composer install later in your GitHub Actions workflow.
Rebuild the Docker Images: After updating the Dockerfile, you will need to rebuild the app image. You can update the workflow to ensure the image is built before trying to install Composer dependencies.
Modify the GitHub Actions Workflow:
Ensure that the Docker Compose setup is up-to-date and rebuild the containers when needed:

yaml
Copy
Edit
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Start Docker Containers
        run: |
          docker compose up -d --build

      - name: Wait for Containers to Be Ready
        run: |
          # Check if the 'app' container is up and running
          until docker compose ps | grep -q 'app.*running'; do
            echo "Waiting for app container to be ready..."
            sleep 5
          done

      - name: Key  generations
        run: docker compose exec app php artisan key:generate
    
      - name: Run Migrations
        run: docker compose exec app php artisan migrate
        
      - name: Run Tests
        run: docker compose exec app php artisan test

      - name: Stop and Remove Containers
        run: docker compose down

  push-to-docker-hub:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push App Image
        run: |
          # Tag and push the App image
          docker tag atuprojectmentpipeline-app-1 ${{ secrets.DOCKER_USERNAME }}/atupipeline-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/atupipeline-app

          # Tag and push the Web image
          docker tag atuprojectmentpipeline-web-1 ${{ secrets.DOCKER_USERNAME }}/atupipeline-web:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/atupipeline-web

          # Tag and push the Database image
          docker tag atuprojectmentpipeline-database-1 ${{ secrets.DOCKER_USERNAME }}/atupipeline-mysqldb:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/atupipeline-mysqldb

          # Tag and push the phpMyAdmin image
          docker tag atuprojectmentpipeline-pma-1 ${{ secrets.DOCKER_USERNAME }}/atupipeline-phpmyadmin:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/atupipeline-phpmyadmin

  #deploy:
   # needs: push-to-docker-hub
    #runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main'

    #steps:
     # - name: Checkout Repository
      #  uses: actions/checkout@v3

      #- name: Set up Kubernetes CLI
      #  uses: azure/setup-kubectl@v3

      #- name: Configure Kubeconfig
       # run: echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config

      #- name: Deploy to Kubernetes
       # run: |
        #  kubectl apply -f k8s/
         # kubectl rollout restart deployment laravel-app
